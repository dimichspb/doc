<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "payment".
 *
 * @property integer $id
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $order
 * @property integer $entity
 * @property double $amount
 *
 * @property Entity $entity0
 * @property Order $order0
 */
class Payment extends \yii\db\ActiveRecord
{
    const STATUS_DELETED = 30;
    const STATUS_INACTIVE = 20;
    const STATUS_ACTIVE = 10;
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'payment';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'created_at', 'updated_at', 'order', 'entity'], 'integer'],
            [['order', 'entity'], 'required'],
            [['amount'], 'number'],
            [['entity'], 'exist', 'skipOnError' => true, 'targetClass' => Entity::className(), 'targetAttribute' => ['entity' => 'id']],
            [['order'], 'exist', 'skipOnError' => true, 'targetClass' => Order::className(), 'targetAttribute' => ['order' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'Номер',
            'status' => 'Статус',
            'created_at' => 'Добавлено',
            'updated_at' => 'Изменено',
            'order' => 'Заказ',
            'entity' => 'Плательщик',
            'amount' => 'Сумма',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEntity()
    {
        return $this->hasOne(Entity::className(), ['id' => 'entity']);
    }
    
    /**
    * @return Entity
    */
    public function getEntityOne()
    {
        return $this->getEntity()->one();
    }
    
    public function getEntityName()
    {
        return $this->getEntityOne()->getFull();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrder()
    {
        return $this->hasOne(Order::className(), ['id' => 'order']);
    }
    
    /**
    * @return Order 
    */
    public function getOrderOne()
    {
        return $this->getOrder()->one();
    }
    
    public function getOrderName()
    {
        return $this->getOrderOne()->getName();
    }
    
    /**
    * @return array
    */
    public static function getStatusArray()
    {
        $statusArray = [
            Payment::STATUS_ACTIVE => 'Новая',
            Payment::STATUS_INACTIVE => 'Неактивная',
            Payment::STATUS_DELETED => 'Удалена',
        ];
        return $statusArray;
    }
    
    /**
    * @return string 
    */
    public function getStatusName()
    {
        $statusArray = Payment::getStatusArray();
        return isset($statusArray[$this->status])? $statusArray[$this->status]: '';
    }
    
    public function beforeSave($insert)
    {
        $today = new \DateTime();
        $this->updated_at = $today->getTimestamp();

        if ($insert) {
            $this->created_at = $today->getTimestamp();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    
    public function getName()
    {
        return implode(' - ', [
            $this->id,
            $this->getOrderName(),
            $this->getEntityName(),
            $this->amount,
        ]);
    }
}
